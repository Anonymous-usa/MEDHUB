from rest_framework import generics, status, serializers
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from drf_spectacular.utils import extend_schema

from .models import Notification
from .serializers import NotificationSerializer
from .permissions import IsRecipient


# üîß Swagger helper serializers
class NotificationMarkedCountSerializer(serializers.Serializer):
    marked_count = serializers.IntegerField()


class NotificationErrorSerializer(serializers.Serializer):
    error = serializers.CharField()


@extend_schema(
    tags=["Notifications"],
    summary="–°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                "–ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É (?is_read=true/false).",
    responses={200: NotificationSerializer(many=True)},
)
class NotificationListView(generics.ListAPIView):
    serializer_class = NotificationSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        if getattr(self, "swagger_fake_view", False):
            return Notification.objects.none()

        qs = Notification.objects.select_related("actor", "recipient").filter(
            recipient=self.request.user
        )

        is_read = self.request.query_params.get("is_read")
        if is_read is not None:
            qs = qs.filter(is_read=is_read.lower() in ["true", "1"])

        return qs.order_by("-created_at")


@extend_schema(
    tags=["Notifications"],
    summary="–ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ",
    description="–ü–æ–º–µ—á–∞–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é.",
    request=None,
    responses={
        200: NotificationSerializer,
        403: NotificationErrorSerializer,
        404: NotificationErrorSerializer,
    },
)
class NotificationMarkReadView(generics.UpdateAPIView):
    serializer_class = NotificationSerializer
    permission_classes = [IsRecipient]
    queryset = Notification.objects.all()

    def patch(self, request, *args, **kwargs):
        notification = self.get_object()
        if not notification.is_read:
            notification.is_read = True
            notification.save(update_fields=["is_read", "updated_at"])
        return Response(
            self.get_serializer(notification).data,
            status=status.HTTP_200_OK
        )


@extend_schema(
    tags=["Notifications"],
    summary="–ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏",
    description="–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö.",
    request=None,
    responses={200: NotificationMarkedCountSerializer},
)
class NotificationMarkAllReadView(generics.GenericAPIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        qs = Notification.objects.filter(
            recipient=request.user,
            is_read=False
        )
        updated_count = qs.update(is_read=True)
        return Response(
            {"marked_count": updated_count},
            status=status.HTTP_200_OK
        )
