from django.db.models import Q
from rest_framework import generics, permissions, status, views, serializers
from rest_framework.response import Response
from rest_framework.exceptions import ValidationError
from drf_spectacular.utils import extend_schema, extend_schema_view, OpenApiParameter
from django.utils.translation import gettext_lazy as _
from accounts.models import User
from .models import Message
from .serializers import MessageSerializer
import logging

logger = logging.getLogger(__name__)


# üîß Swagger helper serializers
class MessageStatusSerializer(serializers.Serializer):
    status = serializers.CharField()


class MessageErrorSerializer(serializers.Serializer):
    error = serializers.CharField()


@extend_schema(
    tags=["Messages"],
    summary="–°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                "–î–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø–∞—Ä—ã (sender, receiver) –±–µ—Ä—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    responses={200: MessageSerializer(many=True)},
)
class DialogListView(generics.ListAPIView):
    serializer_class = MessageSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        if getattr(self, "swagger_fake_view", False):
            return Message.objects.none()

        user = self.request.user
        messages = Message.objects.filter(Q(sender=user) | Q(receiver=user))

        latest_by_pair = {}
        for msg in messages:
            pair = tuple(sorted([msg.sender_id, msg.receiver_id]))
            if pair not in latest_by_pair or msg.created_at > latest_by_pair[pair].created_at:
                latest_by_pair[pair] = msg

        return sorted(latest_by_pair.values(), key=lambda m: m.created_at, reverse=True)


@extend_schema_view(
    get=extend_schema(
        tags=["Messages"],
        summary="–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
        parameters=[
            OpenApiParameter(
                name="user_id",
                location=OpenApiParameter.PATH,
                required=True,
                type=int,
                description="ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"
            )
        ],
        responses={200: MessageSerializer(many=True)},
    ),
    post=extend_schema(
        tags=["Messages"],
        summary="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        description="–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                    "–ß–∞—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –¥–æ–∫—Ç–æ—Ä–æ–º –∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º.",
        request=MessageSerializer,
        responses={201: MessageSerializer, 400: MessageErrorSerializer},
    )
)
class ChatView(generics.ListCreateAPIView):
    serializer_class = MessageSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        if getattr(self, "swagger_fake_view", False):
            return Message.objects.none()

        user = self.request.user
        other_user_id: int = self.kwargs['user_id']

        return (
            Message.objects
            .select_related("sender", "receiver")
            .filter(
                Q(sender=user, receiver_id=other_user_id) |
                Q(sender_id=other_user_id, receiver=user)
            )
            .order_by("created_at")
        )

    def perform_create(self, serializer):
        other_user_id = self.kwargs['user_id']

        if other_user_id == self.request.user.id:
            raise ValidationError(_("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ"))

        try:
            other_user = User.objects.get(id=other_user_id)
        except User.DoesNotExist:
            raise ValidationError(_("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))

        roles = {self.request.user.user_type, other_user.user_type}
        if roles != {"doctor", "patient"}:
            raise ValidationError(_("–ß–∞—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –¥–æ–∫—Ç–æ—Ä–æ–º –∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º"))

        instance = serializer.save(sender=self.request.user, receiver=other_user)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {instance.sender} ‚Üí {instance.receiver}")


@extend_schema(
    tags=["Messages"],
    summary="–ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ",
    description="–ü–æ–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –æ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
    request=None,
    responses={200: MessageStatusSerializer, 404: MessageErrorSerializer},
)
class MarkAsReadView(views.APIView):
    permission_classes = [permissions.IsAuthenticated]

    def patch(self, request, pk: int):
        try:
            message = Message.objects.get(pk=pk, receiver=request.user)
            message.is_read = True
            message.status = Message.MessageStatus.READ
            message.save(update_fields=["is_read", "status"])
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {pk} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {request.user}")
            return Response({"status": "read"}, status=status.HTTP_200_OK)
        except Message.DoesNotExist:
            return Response({"error": "Message not found"}, status=status.HTTP_404_NOT_FOUND)
