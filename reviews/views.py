from rest_framework import generics, serializers
from rest_framework.permissions import AllowAny, IsAuthenticated
from drf_spectacular.utils import extend_schema, extend_schema_view, OpenApiParameter

from .models import Review
from .serializers import (
    ReviewCreateSerializer,
    ReviewDetailSerializer,
    ReviewListSerializer,
)
from .permissions import IsPatient


# üîß Swagger helper serializer
class ReviewPostSuccessSerializer(serializers.Serializer):
    id = serializers.IntegerField()
    detail = serializers.CharField()


@extend_schema_view(
    get=extend_schema(
        tags=["Reviews"],
        summary="–°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞.",
        responses={200: ReviewListSerializer(many=True)},
    ),
    post=extend_schema(
        tags=["Reviews"],
        summary="–°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤",
        description="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –ø–æ –ø—Ä–∏–Ω—è—Ç–æ–π –∑–∞—è–≤–∫–µ. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–∞—Ü–∏–µ–Ω—Ç—É.",
        request=ReviewCreateSerializer,
        responses={201: ReviewDetailSerializer},
    )
)
class PatientReviewListCreateView(generics.ListCreateAPIView):
    """
    –ü–∞—Ü–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ.
    """
    permission_classes = [IsAuthenticated, IsPatient]

    def get_queryset(self):
        if getattr(self, "swagger_fake_view", False):
            return Review.objects.none()
        return (
            Review.objects
            .select_related(
                "appointment",
                "appointment__patient",
                "appointment__doctor"
            )
            .filter(appointment__patient=self.request.user)
            .order_by("-created_at")
        )

    def get_serializer_class(self):
        if self.request.method == "POST":
            return ReviewCreateSerializer
        return ReviewListSerializer

    def get_serializer_context(self):
        return {"request": self.request}


@extend_schema(
    tags=["Reviews"],
    summary="–û—Ç–∑—ã–≤—ã –≤—Ä–∞—á–∞",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –ø–æ –µ–≥–æ ID. –î–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
    parameters=[
        OpenApiParameter(
            name="doctor_id",
            location=OpenApiParameter.PATH,
            required=True,
            type=int,
            description="ID –≤—Ä–∞—á–∞"
        )
    ],
    responses={200: ReviewListSerializer(many=True)},
)
class DoctorReviewListView(generics.ListAPIView):
    """
    –õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞.
    """
    permission_classes = [AllowAny]
    serializer_class = ReviewListSerializer

    def get_queryset(self):
        if getattr(self, "swagger_fake_view", False):
            return Review.objects.none()
        doctor_id: int = self.kwargs.get("doctor_id")
        return (
            Review.objects
            .select_related(
                "appointment",
                "appointment__patient",
                "appointment__doctor"
            )
            .filter(appointment__doctor_id=doctor_id)
            .order_by("-created_at")
        )
