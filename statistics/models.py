# statistics/models.py
from django.db import models
from django.utils.translation import gettext_lazy as _
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from core.models import TimeStampedModel


class StatisticRecord(TimeStampedModel):
    """
    –•—Ä–∞–Ω–∏—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –æ–±—ä–µ–∫—Ç—É)
    –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    –ü—Ä–∏–º–µ—Ä—ã:
    - –ö–æ–ª-–≤–æ –ø—Ä–∏—ë–º–æ–≤ –∑–∞ –¥–µ–Ω—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞
    - –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü
    - –û–±—â–µ–µ —á–∏—Å–ª–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ
    """

    class MetricType(models.TextChoices):
        APPOINTMENTS_COUNT = "appointments_count", _("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–≤")
        AVG_RATING = "avg_rating", _("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥")
        NEW_USERS = "new_users", _("–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        CUSTOM = "custom", _("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞")

    metric = models.CharField(
        max_length=50,
        choices=MetricType.choices,
        verbose_name=_("–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º DecimalField –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ 4.37)
    value = models.DecimalField(
        max_digits=12,
        decimal_places=2,
        verbose_name=_("–ó–Ω–∞—á–µ–Ω–∏–µ")
    )

    # –ü–µ—Ä–∏–æ–¥, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –º–µ—Ç—Ä–∏–∫–∞
    period_start = models.DateField(verbose_name=_("–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞"))
    period_end = models.DateField(verbose_name=_("–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞"))

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É: –≤—Ä–∞—á, —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Ç.–¥.
    target_ct = models.ForeignKey(
        ContentType,
        on_delete=models.CASCADE,
        null=True,
        blank=True
    )
    target_id = models.PositiveIntegerField(null=True, blank=True)
    target = GenericForeignKey("target_ct", "target_id")

    class Meta:
        verbose_name = _("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å")
        verbose_name_plural = _("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        indexes = [
            models.Index(fields=["metric", "period_start", "period_end"]),
            models.Index(fields=["target_ct", "target_id"]),
        ]
        unique_together = ("metric", "period_start", "period_end", "target_ct", "target_id")
        ordering = ["-period_start"]

    def __str__(self):
        scope = f" for {self.target}" if self.target else ""
        return f"{self.get_metric_display()} ({self.period_start} ‚Üí {self.period_end}){scope}: {self.value}"

    # üîß –£–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
    @classmethod
    def get_for_period(cls, metric, start, end, target=None):
        qs = cls.objects.filter(metric=metric, period_start=start, period_end=end)
        if target:
            qs = qs.filter(
                target_ct=ContentType.objects.get_for_model(target),
                target_id=target.id
            )
        return qs.first()
