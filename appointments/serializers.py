from rest_framework import serializers
from django.utils.translation import gettext_lazy as _
from .models import AppointmentRequest


# üîß Swagger helper serializers (–¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
class AppointmentSuccessSerializer(serializers.Serializer):
    detail = serializers.CharField()


class AppointmentErrorSerializer(serializers.Serializer):
    detail = serializers.CharField()


class AppointmentRequestCreateSerializer(serializers.ModelSerializer):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏—ë–º.
    –ü–∞—Ü–∏–µ–Ω—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ request.user.
    """

    class Meta:
        model = AppointmentRequest
        fields = ('doctor', 'note')

    def validate_doctor(self, doc):
        if not doc.is_doctor():
            raise serializers.ValidationError(_('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞'))
        if not doc.is_active:
            raise serializers.ValidationError(_('–í—Ä–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–∏—ë–º–∞'))
        return doc

    def create(self, validated_data):
        user = self.context['request'].user
        doctor = validated_data['doctor']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
        existing = AppointmentRequest.objects.filter(
            patient=user,
            doctor=doctor,
            status=AppointmentRequest.Status.PENDING
        ).first()
        if existing:
            raise serializers.ValidationError(
                {'detail': _('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –∫ —ç—Ç–æ–º—É –≤—Ä–∞—á—É')}
            )

        return AppointmentRequest.objects.create(patient=user, **validated_data)


class AppointmentRequestDetailSerializer(serializers.ModelSerializer):
    """
    –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.
    """
    patient_phone = serializers.CharField(source='patient.phone_number', read_only=True)
    doctor_phone = serializers.CharField(source='doctor.phone_number', read_only=True)
    patient_name = serializers.CharField(source='patient.get_full_name', read_only=True)
    doctor_name = serializers.CharField(source='doctor.get_full_name', read_only=True)

    class Meta:
        model = AppointmentRequest
        fields = (
            'id',
            'patient_name', 'patient_phone',
            'doctor_name', 'doctor_phone',
            'note',
            'status',
            'appointment_time',
            'created_at', 'updated_at'
        )
        read_only_fields = (
            'status',
            'created_at',
            'updated_at',
            'patient_name', 'patient_phone',
            'doctor_name', 'doctor_phone'
        )


class AppointmentStatusUpdateSerializer(serializers.ModelSerializer):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–≤—Ä–∞—á/–∞–¥–º–∏–Ω).
    """
    status = serializers.ChoiceField(choices=AppointmentRequest.Status.choices)

    class Meta:
        model = AppointmentRequest
        fields = ('status',)

    def validate_status(self, value):
        if value == AppointmentRequest.Status.PENDING:
            raise serializers.ValidationError(_('–ù–µ–ª—å–∑—è —Å–±—Ä–æ—Å–∏—Ç—å –≤ —Å—Ç–∞—Ç—É—Å ‚Äú–û–∂–∏–¥–∞–µ—Ç‚Äù'))
        return value

    def update(self, instance, validated_data):
        new_status = validated_data['status']
        instance.status = new_status
        instance.save()

        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚Äî –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∫ —ç—Ç–æ–º—É –≤—Ä–∞—á—É –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è
        if new_status == AppointmentRequest.Status.ACCEPTED:
            AppointmentRequest.objects.filter(
                doctor=instance.doctor,
                status=AppointmentRequest.Status.PENDING
            ).exclude(id=instance.id).update(status=AppointmentRequest.Status.REJECTED)

        return instance
