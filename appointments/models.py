from django.db import models
from django.utils.translation import gettext_lazy as _
from django.core.exceptions import ValidationError
from django.conf import settings

User = settings.AUTH_USER_MODEL


class AppointmentRequest(models.Model):
    class Status(models.TextChoices):
        PENDING = 'pending', _('–û–∂–∏–¥–∞–µ—Ç')
        ACCEPTED = 'accepted', _('–ü—Ä–∏–Ω—è—Ç–∞')
        REJECTED = 'rejected', _('–û—Ç–∫–ª–æ–Ω–µ–Ω–∞')
        CANCELLED = 'cancelled', _('–û—Ç–º–µ–Ω–µ–Ω–∞')  # üî• –¥–æ–±–∞–≤–∏–ª –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –ª–æ–≥–∏–∫–∏

    patient = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='appointment_requests',
        verbose_name=_('–ü–∞—Ü–∏–µ–Ω—Ç')
    )
    doctor = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name='incoming_requests',
        verbose_name=_('–í—Ä–∞—á')
    )
    note = models.TextField(
        blank=True,
        verbose_name=_('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–∞—Ü–∏–µ–Ω—Ç–∞')
    )
    status = models.CharField(
        max_length=20,
        choices=Status.choices,
        default=Status.PENDING,
        verbose_name=_('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏')
    )
    appointment_time = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name=_('–í—Ä–µ–º—è –ø—Ä–∏—ë–º–∞')
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name=_('–ê–∫—Ç–∏–≤–Ω–∞')
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        verbose_name=_('–°–æ–∑–¥–∞–Ω–∞')
    )
    updated_at = models.DateTimeField(
        auto_now=True,
        verbose_name=_('–û–±–Ω–æ–≤–ª–µ–Ω–∞')
    )

    class Meta:
        verbose_name = _('–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—ë–º')
        verbose_name_plural = _('–ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏—ë–º')
        ordering = ('-created_at',)
        unique_together = ('patient', 'doctor')
        indexes = [
            models.Index(fields=['status']),
            models.Index(fields=['doctor']),
            models.Index(fields=['patient']),
        ]

    def clean(self):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏:
        - –ü–∞—Ü–∏–µ–Ω—Ç –∏ –≤—Ä–∞—á –Ω–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å
        - –ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Ä–æ–ª—å—é PATIENT
        - –í—Ä–∞—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Ä–æ–ª—å—é DOCTOR
        """
        if self.patient_id == self.doctor_id:
            raise ValidationError(_('–ü–∞—Ü–∏–µ–Ω—Ç –∏ –≤—Ä–∞—á –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'))

        if not self.patient.is_patient():
            raise ValidationError(_('–°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–∞—Ü–∏–µ–Ω—Ç'))

        if not self.doctor.is_doctor():
            raise ValidationError(_('–ù–∞–∑–Ω–∞—á–∞—Ç—å –ø—Ä–∏—ë–º –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∫ –≤—Ä–∞—á—É'))

    def __str__(self):
        return f"{self.patient} ‚Üí {self.doctor} [{self.get_status_display()}]"
